// Heikin-Ashi Volume (improved) - Pine v5
// Example implementation for EA/EA-integration and repo use.
// Implements: correct Heikin-Ashi recursion, float divider, MA options,
// confirmation on last closed bar, spike detection, optional HA direction requirement.
// NOT the original author; created to reproduce behavior described in README.

//@version=5
indicator("Heikin-Ashi Volume (improved)", shorttitle="HA Volume (imp)", overlay=false)

// ---------- Inputs ----------
divider        = input.float(4.0,   "Divider",          minval=0.0001, tooltip="Scale volume by this divider (float)")
ma_len         = input.int(20,      "Volume MA Length", minval=1)
ma_type        = input.string("SMA","MA Type",         options=["SMA","EMA"])
spike_mult     = input.float(1.5,   "Spike Multiplier", minval=0.1, step=0.1, tooltip="Spike if vol >= vol_ma * spike_mult")
require_ha_dir = input.bool(true,   "Require HA direction?", tooltip="If true, confirmation also requires HA bar to be bullish/bearish")
use_last_closed_only = input.bool(true, "Use last-closed bar semantics", tooltip="Check confirmed conditions only on completed bars (recommended for EA usage)")
show_spike     = input.bool(true,   "Show Spike markers")
show_confirm   = input.bool(true,   "Show Confirm markers")

// ---------- Heikin-Ashi candles (correct recursion) ----------
ha_close = (open + high + low + close) / 4.0
var float ha_open = na
ha_open := na(ha_open[1]) ? (open + close) / 2.0 : (ha_open[1] + ha_close[1]) / 2.0
ha_high = math.max(high, math.max(ha_open, ha_close))
ha_low  = math.min(low, math.min(ha_open, ha_close))

// ---------- Volume processing ----------
vol_scaled = volume / divider

vol_ma = ma_type == "EMA" ? ta.ema(vol_scaled, ma_len) : ta.sma(vol_scaled, ma_len)

// Use HA direction if requested
ha_bull = ha_close >= ha_open
ha_bear = ha_close < ha_open

// For EA/backtest correctness: evaluate conditions on the last CLOSED bar (index 1) if requested
idx = use_last_closed_only ? 1 : 0

confirm_bar = vol_scaled[idx] >= vol_ma[idx]
if require_ha_dir
    confirm_bar := confirm_bar and (ha_bull[idx] or ha_bear[idx])  // keep direction check available; (true if either, but we can use separate flags later)

// Spike detection on closed bar
spike_bar = vol_scaled[idx] >= vol_ma[idx] * spike_mult

// ---------- Plotting ----------
bar_up = ha_bull  // color by HA direction to reflect "Heikin-Ashi Volume"
vol_color = bar_up ? color.new(color.green, 0) : color.new(color.red, 0)

plot(vol_scaled, style=plot.style_columns, color=vol_color, title="HA Volume (scaled)")
plot(vol_ma,    color=color.white, linewidth=2, title="Volume MA")

// Plot shapes for closed bars when condition true
if show_confirm
    // show on the bar itself (use index 0 to show on the corresponding bar); show only for closed bars by checking idx==1 behavior
    plotshape(confirm_bar ? true : false, title="Volume Confirm", location=location.top, style=shape.triangleup, size=size.tiny, color=color.lime, text="VOLâœ“")

if show_spike
    plotshape(spike_bar ? true : false, title="Spike", location=location.top, style=shape.circle, size=size.tiny, color=color.blue, text="SPIKE")

// ---------- Alerts (fire only when condition appears on closed bar) ----------
confirm_event = confirm_bar and not nz(confirm_bar[1], false)
spike_event   = spike_bar and not nz(spike_bar[1], false)

alertcondition(confirm_event, title="Volume Confirmed", message="Volume bar closed at/above MA (confirm)")
alertcondition(spike_event,   title="Volume Spike",     message="Volume spike detected (>= MA * spike_mult)")

// Expose series values for EA via labels or prints if needed (optional)
// For debugging: last values (uncomment to display on chart as labels)
//label.new(bar_index, high, "vol:"+str.tostring(vol_scaled, "#.##")+"\nma:"+str.tostring(vol_ma, "#.##"), yloc=yloc.abovebar, color=color.gray, textcolor=color.white, style=label.style_label_left, size=size.tiny)